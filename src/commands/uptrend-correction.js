import { Command } from "commander";
import chalk from "chalk";
import yf from "yahoo-finance2"
import { SMA, EMA } from 'technicalindicators'
import { WebhookClient, EmbedBuilder } from 'discord.js';
import { fetchTicker } from '../utils/fetch-ticker.js';
import { getStartDate, formatNumber } from '../utils/common.js'

class UptrendCorrectionCommand {
  constructor() {
    this.command = new Command("uptrend-correction") // change command name here if needed
      .description("Uptrend Correction Screenning")
      .option("--discord <webhook>", "Send result to Discord")
      .action((options) => this.run(options));
  }

  async run(options) {
    const tickers = fetchTicker(true);

    let uptrendCorrections = [];

    const startDate = getStartDate(1000);

    for (let i = 0; i < tickers.length; i++) {
      const ticker = tickers[i].replaceAll("'", "");

      try {
        const history = await yf.historical(
          ticker,
          { period1: startDate, interval: '1d' }
        );

        const closes = history.map(day => day.close);

        const close = closes.slice(-1)[0];

        const priceSMA20 = SMA.calculate({ period: 20, values: closes }).slice(-1)[0];
        const priceSMA50 = SMA.calculate({ period: 50, values: closes }).slice(-1)[0];
        const priceSMA200 = SMA.calculate({ period: 200, values: closes }).slice(-1)[0];
        const priceEMA13 = EMA.calculate({ period: 13, values: closes }).slice(-1)[0];

        const volumes = history.map(day => day.volume);
        const volume = volumes.slice(-1)[0];

        const volumeSMA5 = SMA.calculate({ period: 5, values: volumes }).slice(-1)[0];
        const volumeSMA20 = SMA.calculate({ period: 20, values: volumes }).slice(-1)[0];

        const isUptrendCorrection = priceSMA20 > priceSMA50 //sma20 > sma50
          && priceSMA50 > priceSMA200 //and sma50>sma200
          && close > priceSMA200 //and close > sma200
          && close < priceSMA20 //and close < sma20
          && close < priceEMA13 //and close < ema13
          && volumeSMA5 > 1000000 //and sma("volume",5)> 1000000
          && volumeSMA20 > 1000000 //and sma("volume",20)> 1000000
          && close > 60;

        if(isUptrendCorrection){
          uptrendCorrections.push({
            ticker,
            close,
            volume,
            priceSMA20: Math.round(priceSMA20),
            priceSMA50: Math.round(priceSMA50),
            priceSMA200: Math.round(priceSMA200),
            priceEMA13: Math.round(priceEMA13),
            strVolume: formatNumber(volume),
            volumeSMA5: formatNumber(volumeSMA5),
            volumeSMA20: formatNumber(volumeSMA20),
          });

          const percent = Math.floor(((i + 1) / tickers.length) * 100);
          process.stdout.write(`\rprocessing ${percent}%`);

        }

      } catch (error) {
        console.log(chalk.red(error));
      }
    }

    console.log("\n");
    console.table(['Uptrend Correction'])
    uptrendCorrections = uptrendCorrections.sort((a, b) => a.volume - b.volume);
    uptrendCorrections = uptrendCorrections.slice(-10)
    uptrendCorrections = uptrendCorrections.sort((a, b) => b.volume - a.volume);

    if (options.discord) {
      const webhookClient = new WebhookClient({
        url: options.discord
      });

      const embed = new EmbedBuilder()
        .setTitle("ðŸ“Š IDX Stock Screening Result")
        .setDescription("Hasil screening uptrend correction hari ini")
        .setColor(0x00ae86)
        .setTimestamp()
        .setFooter({ text: "Generated by OMSS CLI at GithubAction" });

      uptrendCorrections.forEach((s, i) => {
        embed.addFields({
          name: `${i + 1}. ${s.ticker} â€” Close: ${s.close}`,
          value: [
            `ðŸ’µ Volume: ${s.strVolume}`,
            `Stockbit: https://stockbit.com/symbol/${s.ticker.slice(0, 4)}/chartbit`
          ].join("\n"),
          inline: false
        });
      });

      webhookClient.send({ embeds: [embed] });
    }
    console.table(uptrendCorrections);
  }

  getCommand() {
    return this.command;
  }
}

// Export an instance of the class
export default new UptrendCorrectionCommand().getCommand();
