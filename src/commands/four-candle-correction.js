import { Command } from "commander";
import chalk from "chalk";
import yf from "yahoo-finance2"
import { WebhookClient, EmbedBuilder } from 'discord.js';
import { fetchTicker, generateResult } from '../utils/fetch-ticker.js';
import { getStartDate, formatNumber } from '../utils/common.js'

class FourCandleCorrectionCommand {
  constructor() {
    this.command = new Command("four-candle-correction") // change command name here if needed
      .description("Four Candle Correction Screenning")
      .option("--discord <webhook>", "Send result to Discord")
      .option("--out", "Generate the result to a json file for forwarding test")
      .action((options) => this.run(options));
  }

  async run(options) {
    const tickers = fetchTicker();

    let fourCandleCorrections = [];

    const startDate = getStartDate(10);

    for (let i = 0; i < tickers.length; i++) {
      const ticker = tickers[i].replaceAll("'", "");

      try {
        const history = await yf.historical(
          ticker,
          { period1: startDate, interval: '1d' }
        );

        const percentages = history.map(({ open, close }) => (100 / open) * (close - open)).slice(-5);

        const {
          volume = 0,
          close = 0,
        } = history.slice(-1)[0];

        const value = close * volume;

        let conditions = (
          percentages[0] > 0 // bulish
          && percentages.slice(1, 5).every(p => p < 0)// 4 bearish candles
          && (close >= 60 && close <= 200)// price 60 until 200
          && value >= 1 * 1e9  // min 1 billion turn over (transaction value)
        );
        if(!conditions){
          continue;
        }

        fourCandleCorrections.push({
          ticker,
          volume,
          strVolume: formatNumber(volume),
          strValue: formatNumber(value),
          close,
        });

        const loadingPercent = Math.floor(((i + 1) / tickers.length) * 100);
        process.stdout.write(`\rprocessing ${loadingPercent}%`);

      } catch (error) {
        console.log(chalk.red(error));
      }
    }

    console.log("\n");
    console.table(['4 Candle Correction'])
    fourCandleCorrections = fourCandleCorrections.sort((a, b) => b.volume - a.volume);

    if (options.discord) {
      this.sendToDiscord(fourCandleCorrections, options.discord);
    }

    if(options.out){
      generateResult(fourCandleCorrections, '4candle-correction');
    }

    console.table(fourCandleCorrections);
  }

  getCommand() {
    return this.command;
  }


  async sendToDiscord(selections, url) {
    const webhookClient = new WebhookClient({
      url
    });

    const embed = new EmbedBuilder()
      .setTitle("ðŸ“Š IDX Stock Screening Result")
      .setDescription("Hasil screening uptrend correction hari ini")
      .setColor(0x00ae86)
      .setTimestamp()
      .setFooter({ text: "Generated by OMSS CLI at GithubAction" });
    selections.forEach((s, i) => {
      embed.addFields({
        name: `${i + 1}. ${s.ticker} â€” Close: ${s.close}`,
        value: [
          `ðŸ’µ Volume: ${s.strVolume}`,
          `ðŸ”„ Value: ${s.strValue}`,
          `Stockbit: https://stockbit.com/symbol/${s.ticker.slice(0, 4)}/chartbit`,
        ].join("\n"),
        inline: false
      });
    });
    webhookClient.send({ embeds: [embed] });
  }
}

// Export an instance of the class
export default new FourCandleCorrectionCommand().getCommand();
